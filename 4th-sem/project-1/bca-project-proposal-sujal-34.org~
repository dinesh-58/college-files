* TODO project todos
# just search for TODO in this file
# [[*Problem Statement][describe more here:  Problem Statement]]
# configure projector [[https://wiki.archlinux.org/title/multihead][support]]
# export 2 pdfs.
# A4 size (portrait) for print & soft copy
# (landscape) for presentation. make sure each page doesn't have too much text. (set custom pagebreak css?) go thru all pages
# ~f5~ in Zathura for presentation mode. 
# edit all text to be presentation-friednly (use points, list items instead of paragraphs)
# after starting development, turn notes.md into .org
# use funcional, aesthetic todos that are then separated by priority
# one aesthetic is toggle for showing cards as literal cards while review (low priority)
# use acronym for subjects to add to card id (DBMS1)
# set daily limit for cards. option in review page instead of settings?
  # show progress bar like 4/10 cards done today
* Introduction
CardsQL is a simple flashcard revision app. Flashcards are a memorization/revision technique where you write a question on one side of a card/ piece of paper & the answer on the other side. You then read the question & try your best to remember the answer, before flipping the card over & see how well you did.

# this scientific concept should be in Background Study in Main Report?
Cognitive researchers have found that trying to recall such facts strengthens the relevant neural connections in our brain & thus, allows us to remember it for longer periods of time. This process is specifically called *Active Recall*. Another technique used in tandem with Active Recall is *Spaced Repitition*. It dictates that your ability to remember a fact deteriorates over time. By performing Active Recall at specific intervals, we can re-strengthen our memory retention.

Thus, instead of studying entire topics repeatedly, we can just revise small bits of information.
** TODO didn't know what to do w/ this last paragraph. Either describe (active vs passive study benefits) properly w/ evidence or remove from here

* Problem Statement
- inefficient traditional studying techniques
  # elevator pitch for why to use flashcards before diving deeper
  # leaving this empty for now cause it might fit better in Intro? 

While the concepts of Flashcards, Active Recall, & Spaced Repitition can be implemented without a digital solution like CardsQl, doing so poses a few problems. Those problems, & how CardsQL solves them, are as follows:

- inconvenient to manage physical flashcards:
  Physical cards will eventually get damaged or wear out. It may also be impractical to store or carry around a large number of cards. 
  Storing cards digitally allows them to be physically secure & portable.
- cumbersome to schedule, keep track of next repition for cards
  After reviewing/ recalling a card, we need to schedule its next Spaced Repitition. We not only need to keep track of its schedule, but also remember to review it on that day. If we forget, then keeping track of overdue cards adds another layer of unneeded complexity.

  CardsQL automates all these processes. After reviewing a card, we can rate how well we remembered the answer. This rating is used to determine the next review date for that card. This rating is used so that by the next review, we haven't completely forgotten the answer, nor is it too easy.
  Further explanation of the rating system can be found in [[*High level design of System][High level design of System]].  
  When revising on a particular day, CardsQL will show you cards that are scheduled for that day or older. Thus, overdue cards are handled easily.

# These above points should each get their own powerpoint page. maybe headings but they'll show up in ToC
* Objectives
- allow creating different types of flashcards & categorizing them by subject/ tag
- automate scheduling of next review
- provide intuitive interface so that user doesn't have to understand how the system works in order to utilize it
- provide as easy of an entry point to flashcard programs by keeping things simple 
  # mix these last 2 points
* Methodology
** Requirement Identification
*** Study of existing system
Two popular flashcard apps are:
1. Quizlet
   Pros
   - pre-made flashcards for subjects
   - emphasis on mobile version UX which allows users to revise anytime, anywhere
   - utilize machine learning from anonymous user-data to create custom study plans for users
   Cons
   - free version has ads & lacks advanced features
   - can't be used offline on free version
     
2. Anki
   Pros
   - Free & Open Source (FOSS)
   - supports sync between multiple devices
   - highly customizable with user-defined card types & community-made plugins
   Cons
   - complex from start
   - CardsQL should act as gateway/ intro to flashcards. can use Anki later
   - might have to spend a lot of time customizing the program, adding plugins, to get a great experience
*** Requirement Collection
**** Functional requirements
Note: /As CardsQL is meant for personal use, it only has one type of user instead of admin, multiple users etc./
***** User
- can add different types of cards
- can revise due cards
- can revise cards regardless of due date (for pre-exam practice)
- can edit text, type  & review date of existing cards
- can reset review date for all cards
**** Non-Functional requirements
- offline access to all features 
  achieved by hosting sql server & storing data on user's computer
- simple to use
  create simple onboarding, tutorial
     show user to create a card, then review it. different card types should be explained afterwards
  1st thing user sees is just card creation interface
- not have too many due cards (set maximum limit)
- (daily data backups?)
  # sql has built-in backup command/ functionality
**** Use Case diagram?
** Feasibility Study
*** Technical
CardsQL is not too difficult to implement from a technical standpoint because it uses:

- plain HTML, CSS for the front-end
- basic JS, PHP for the busienss logic
- SQLite, a lightweight RDBMS, for the database. It uses a database file on the user's computer so it negates the need for maintaining a server for users to connect to.
# sqlite + php
*** Operational
- Because of the serverless architecture, the app will work at all times after downloading it. Thus, there is no need to designate manpower to ensure the app stays operational after launch.
- Users are sure to adopt the app as it is designed to be more convenient than paper flashcards. Anyone should be able to learn to use it, compared to ther more advanced flashcard programs discussed in [[*Study of existing system][Study of existing system]]
*** Economic
CardsQl is viable from an economic standpoint as:
- The project was willingly built by the devloper for free.
- There are no additional costs for web hosting, server maintenance etc.
- There were no development costs as the app was builton the developer's existing hardware & using freely-licensed tools. 
- The app is distributed freely to help users so there is no potential profit or loss.
** High level design of System
# for E-R diagram, card should be entity too?
# system flow chart/ methodology/ working mechanism
*** System Flow Chart
#+begin_src plantuml :file my-diagram.png
title Authentication Sequence

Alice->Bob: Authentication Request
note right of Bob: Bob thinks about it
Bob->Alice: Authentication Response
#+end_src
*** Methodology/ Working Mechanism
* Gantt Chart
* Expected Outcome
* References

