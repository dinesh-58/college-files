# TODO project todos
# just search for TODO in this file
# configure projector [[https://wiki.archlinux.org/title/multihead][support]]
# export 2 pdfs.
# for E-R diagram, card should be entity too?
# A4 size (portrait) for print & soft copy
# (landscape) for presentation. make sure each page doesn't have too much text. (set custom pagebreak css?) go thru all pages
# ~f5~ in Zathura for presentation mode. 
# edit all text to be presentation-friednly (use points, list items instead of paragraphs)
# after starting development, turn notes.md into .org
# use funcional, aesthetic todos that are then separated by priority
# one aesthetic is toggle for showing cards as literal cards while review (low priority)
# use acronym for subjects to add to card id (DBMS1)
# set daily limit for cards. option in review page instead of settings?
  # show progress bar like 4/10 cards done today
# TODO create simple onboarding, tutorial if time permits
     # show user to create a card, then revise it. different card types should be explained afterwards
  # sql has built-in backup command/ functionality
  # option to clean up old backup files


#+TITLE: Project Proposal on CardsQL
#+AUTHOR: Sujal Gurung
#+DATE: April 2023

#+BIBLIOGRAPHY: bibliography.bib

#+LATEX: \pagenumbering{roman}
#+LATEX_HEADER: \usepackage[margin=1in, left=1.25in]{geometry}
#+LATEX_HEADER: \usepackage{placeins}

#+LaTeX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage{setspace}
#+LaTeX_HEADER: \setstretch{1.5}
#+LaTeX_HEADER: \usepackage{times}
#+LaTeX_HEADER: \usepackage[12pt]{moresize}
#+LaTeX_HEADER: \AtBeginDocument{\fontsize{12}{15}\selectfont}
#+LaTeX_HEADER: \usepackage{titlesec}
#+LaTeX_HEADER: \titleformat{\chapter}{\bfseries\fontsize{16}{18}\selectfont}{\thechapter}{1em}{}
#+LaTeX_HEADER: \titleformat{\section}{\bfseries\fontsize{14}{16}\selectfont}{\thesection}{1em}{}
#+LaTeX_HEADER: \titleformat{\subsection}{\bfseries\fontsize{12}{14}\selectfont}{\thesubsection}{1em}{}
#+LaTeX_HEADER: \usepackage{caption}
#+LaTeX_HEADER: \DeclareCaptionFormat{myformat}{\fontsize{12}{14}\selectfont\bfseries#1#2#3}
#+LaTeX_HEADER: \captionsetup{format=myformat,justification=centering}
#+LaTeX_HEADER: \captionsetup[figure]{position=bottom}
#+LaTeX_HEADER: \captionsetup[table]{position=top}

* Introduction
CardsQL is a simple flashcard revision app. Flashcards are a memorization/revision technique where you write a question on one side of a card/ piece of paper & the answer on the other side. You then read the question & try your best to remember the answer, before flipping the card over & see how well you did.

# TODO this scientific concept should explained in depth in Background Study in Main Report?
Cognitive researchers have found that trying to recall such facts strengthens the relevant neural connections in our brain & thus, allows us to remember it for longer periods of time. This process is specifically called *Active Recall[cite:@active_recall]*.
Another technique used in tandem with Active Recall is *Spaced Repitition[cite:@spaced_repitition]*. It dictates that your ability to remember a fact deteriorates over time. By performing Active Recall at specific intervals, we can re-strengthen our memory retention.
# image size is 1024x574
#+CAPTION:Ebbinghaus' forgetting curve countered by Spaced Repition
#+attr_latex: :width 400px
#+attr_org: :width 400px
[[file:diagrams/forgetting-curve-spaced-repitition.png]]
Thus, instead of studying entire topics repeatedly, we can just revise small key points & be more effective.

* Problem Statement
1. *inefficient traditional studying techniques*
2. *inconvenient to manage physical flashcards*   
   - Physical cards will eventually get damaged or wear out. It may also be impractical to store or carry around a large number of cards. 
   - Storing cards digitally allows them to be physically secure & portable.
3. *cumbersome to schedule, keep track of next repition for cards*   
   - After reviewing/ recalling a card, we need to schedule its next Spaced Repitition. We not only need to keep track of its schedule, but also remember to review it on that day. If we forget, then keeping track of overdue cards adds another layer of unneeded complexity.

   - CardsQL automates all these processes. After reviewing a card, we can rate how well we remembered the answer. This rating is used to determine the next review date for that card. This date is set such that by the next review, we haven't completely forgotten the answer, nor is it too easy.
   - When revising on a particular day, CardsQL will show you cards that are scheduled for that day or older. Thus, overdue cards are handled easily.

* Objectives
- provide as easy of an entry point to flashcard programs by keeping things simple 
- provide intuitive interface so that user doesn't have to understand how the system works in order to utilize it
- allow creating different types of flashcards & categorizing them by subject/ tag
- automate scheduling of next review
* Methodology
** Requirement Identification
This project makes use of the *Waterfall development* approach in order to set concrete requirements & build towards achieving them.
*** Study of existing system
Two popular flashcard apps are:

**** Quizlet
***** Pros
- pre-made flashcards for subjects
- emphasis on mobile version UX which allows users to revise anytime, anywhere
- utilize machine learning from anonymous user-data to create custom study plans for users
***** Cons
- free version has ads & lacks advanced features
- can't be used offline on free version


**** Anki
***** Pros
- Free & Open Source (FOSS)
- supports sync between multiple devices
- highly customizable with user-defined card types & community-made plugins
***** Cons
- complex from start
- CardsQL should act as gateway/ intro to flashcards. can use Anki later
- might have to spend a lot of time customizing the program, adding plugins, to get a great experience
*** Requirement Collection
**** Functional requirements    

Note: /As CardsQL is meant for personal use, it only has one type of user instead of admin, multiple users etc./
***** User
- can add different types of cards
- can revise due cards
- can revise cards regardless of due date (for pre-exam practice)
- can edit text, type  & review date of existing cards
- can reset review date for all cards
**** Non-Functional requirements
- offline access to all features 
  achieved by hosting sql server & storing data on user's computer
- simple to use;
  1st thing user sees is just card creation interface
- not have too many due cards (set maximum limit)
- regular data backups
  # sql has built-in backup command/ functionality
  # option to clean up old backup files
**** Use Case diagram

#+CAPTION: Use case diagram for CardsQL
#+attr_latex: :width 240px
#+attr_org: :width 240px
[[file:diagrams/use-case-diagram.png]]

** Feasibility Study
*** Technical
CardsQL is not too difficult to implement from a technical standpoint because it uses:

- plain HTML, CSS for the front-end
- basic JS, PHP for the busienss logic
- SQLite, a lightweight RDBMS, for the database. It uses a database file on the user's computer so it negates the need for maintaining a server for users to connect to.
*** Operational
- Because of the serverless architecture, the app will work at all times after downloading it. Thus, there is no need to designate manpower to ensure the app stays operational after launch.
- Users are sure to adopt the app as it is designed to be more convenient than paper flashcards. Anyone should be able to learn to use it, compared to other more advanced flashcard programs discussed in [[*Study of existing system][Study of existing system]]
*** Economic
CardsQl is viable from an economic standpoint as:

- The project was willingly built by the devloper for free.
- There are no additional costs for web hosting, server maintenance etc.
- There were no development costs as the app was builton the developer's existing hardware & using freely-licensed tools. 
- The app is distributed freely to help users so there is no potential profit or loss.
** High level design of System
As the following are high level representations of the system, they aim to provide a basic understanding of the system and thus, leave out intricate implementation details.

*** System Flow Chart

#+CAPTION: System flow chart
#+attr_latex: :width 200px
#+attr_org: :width 200px
[[file:diagrams/system-flow-chart.png]]
\FloatBarrier 
# to ensure image is placed exactly here

*** Methodology/ Working Mechanism
/As stated previously, CardsQL does not have different types of users so all the following actions can be done by the user./

**** Add Cards
#+begin_src plantuml :file diagrams/add-cards-flow-chart.png
  @startuml
  scale 400 width
  title System Flow Chart

  start
  :enter card data/
  :insert into database;
  stop
  @enduml
#+end_src

#+RESULTS:
#+CAPTION: Flow chart for adding cards
#+attr_latex: :width 220px
[[file:diagrams/add-cards-flow-chart.png]]
\FloatBarrier

**** Revise Cards
#+begin_src plantuml :file diagrams/review-cards-flow-chart.png
  @startuml
  scale 400 width
  start
  repeat :retrieve card from database;
  if (due today?) then(yes)
          :ask card to user;
          :schedule next due date for card;
          :increment no/. of cards revised today;
          if (daily revision limit reached?) then(yes)
          stop
  else (no)
  endif
  else (no)
  endif 
  repeat while (all cards retrieved?) is(no) not(yes) 
  stop
  @enduml
#+end_src

#+CAPTION: Flow chart for revising cards
#+attr_latex: :width 260px
#+RESULTS:
[[file:diagrams/review-cards-flow-chart.png]]
\FloatBarrier

**** Edit Cards  
Card details can be edited or the entire card can be deleted
#+begin_src plantuml :file diagrams/edit-cards-flw-chart.png
  @startuml
  scale 400 width
  start
  :select card from database;
  :enter new data for card/
  :update corresponding card\'s record in database;
  stop
  @enduml
#+end_src

#+CAPTION: Flow chart for editing cards
#+attr_latex: :width 240px
#+RESULTS:
[[file:diagrams/edit-cards-flw-chart.png]]
\FloatBarrier
* Gantt Chart
#+begin_src plantuml :file diagrams/gantt-chart.png
  @startgantt
  projectscale daily
  Project starts 2023-04-13
  [Requirement analysis] lasts 8 days
  [Design] lasts 7 days and starts at [Requirement analysis]'s end
  [Development] lasts 12 days and starts at [Design]'s end
  [Testing] lasts 6 days and starts at [Development]'s end
  @endgantt
#+end_src

#+CAPTION: Gantt chart based on Waterfall model
#+RESULTS:
[[file:diagrams/gantt-chart.png]]
\FloatBarrier
* Expected Outcome
- Provide a simple introduction to using flashcards,  active recall & spaced repititon for learning
- Eliminate the need to constantly read or make notes on the same topics
- Help make studying a daily habit
* References
#+cite_export: csl ~/.emacs.d/packages/ieee.csl
#+PRINT_BIBLIOGRAPHY:


